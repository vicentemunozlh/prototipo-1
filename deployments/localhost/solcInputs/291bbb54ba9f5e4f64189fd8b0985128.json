{
  "language": "Solidity",
  "sources": {
    "contracts/PollaV2.sol": {
      "content": "// segunda version de la polla donde el jugador ingresa toda su apuesta en una funcion.\n// Esta programado para 3 partidos, pero si se quiere modificar basta con cambiar los uint8[3] => uint8[#]\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nerror Polla_NotAmountToEnter();\n\ncontract Polla is Ownable {\n    address payable[] private players; //se deben agregar estos para crearlo como que cada adress entra por si solo\n    mapping(address => uint256) balances; // para mapear que el address puede entrar solo 1 vez\n    address payable public recentWinner;\n    // ahora se enumera los estados posibles de la polla\n    uint256 private immutable i_entry_fee = 10000000000000000;\n\n    // aca se determina el estado de la polla, esta empezando, esta cerrada o se esta calculando el ganador\n    enum POLLA_STATE {\n        RECEIVING,\n        NOTRECEIVING,\n        MUNDIALENDED,\n        CALCULATING_WINNER,\n        CLOSED\n    }\n    POLLA_STATE public polla_state;\n\n    struct Participante {\n        uint256 puntaje;\n    }\n    mapping(address => Participante) public addressToPuntaje; // aca se genera el mapeado para poder encontrar el puntaje actual de algun participante\n\n    /* Events*/\n    event PollaEnter(address indexed player);\n    event PlayerElections(uint8[3] elections);\n\n    function enterPolla() public payable {\n        // 0.01 ETH entrance\n        if (msg.value != i_entry_fee) {\n            revert Polla_NotAmountToEnter();\n        }\n        require(balances[msg.sender] == 0, \"Player already in Polla!\"); // se define si el participante ya particip贸 anteriormente, esto puede cambiarse si no se quiere esta restricci贸n\n        require(polla_state == POLLA_STATE.RECEIVING, \"Polla is closed!\");\n        balances[msg.sender] += msg.value;\n        players.push(payable(msg.sender));\n        // participantes.push(Participante(msg.sender,0));\n        addressToPuntaje[msg.sender].puntaje = 0;\n        emit PollaEnter(msg.sender);\n    }\n\n    function startPolla() public onlyOwner {\n        require(polla_state == POLLA_STATE.CLOSED, \"Can't start a new polla yet!\");\n        polla_state = POLLA_STATE.RECEIVING;\n    }\n\n    struct EleccionesJugadorPartidos {\n        uint8[3] elecciones;\n        bool eleccionRealizada;\n    }\n\n    mapping(address => EleccionesJugadorPartidos) addressToEleccions;\n\n    function EleccionesJugador(uint8[3] memory _elecciones) public {\n        require(polla_state == POLLA_STATE.RECEIVING, \"Polla is not receiving bets!\");\n        require(balances[msg.sender] > 0, \"Player not in Polla!\"); // se define si el participante ya particip贸 anteriormente, esto puede cambiarse si no se quiere esta restricci贸n\n        //require(_elecciones.length ==64, \"Son 64 elecciones! no mas ni menos\") se elimina este require para ahorrar gas fee, por definicion no se deberian poder entregar mas o menos valores que 64\n        for (uint256 p = 0; p < _elecciones.length; p++) {\n            require(\n                _elecciones[p] < 3,\n                \"Admisible values are: 0=>Gana Local  ; 1=>GanaVisita ; 2 => empate\"\n            );\n        }\n        addressToEleccions[msg.sender].elecciones = _elecciones;\n        addressToEleccions[msg.sender].eleccionRealizada = true;\n        emit PlayerElections(_elecciones);\n    }\n\n    function vereleccionpartidox(address _address, uint8 partido)\n        public\n        view\n        returns (uint8 Eleccion)\n    {\n        Eleccion = addressToEleccions[_address].elecciones[partido];\n        return Eleccion;\n    }\n\n    function EmpiezaMundial() public onlyOwner {\n        require(polla_state == POLLA_STATE.RECEIVING, \"Polla closed or not started!\");\n        polla_state = POLLA_STATE.NOTRECEIVING;\n    }\n\n    function TerminaMundial() public onlyOwner {\n        require(\n            polla_state == POLLA_STATE.NOTRECEIVING,\n            \"Polla has to be started and stoped reciving!\"\n        );\n        polla_state = POLLA_STATE.MUNDIALENDED;\n    }\n\n    function QuienGanoPartidos(uint8[3] memory _partidos_ganados_por) public onlyOwner {\n        // en esta parte se determina el ganador del partido, la idea es que los resultados vengan de una api y no se tengan que agregar manualmente\n        require(polla_state == POLLA_STATE.MUNDIALENDED, \"Mundial has not ended yet!\");\n        for (uint256 p = 0; p < _partidos_ganados_por.length; p++) {\n            require(\n                _partidos_ganados_por[p] < 3,\n                \"Admisible values are: 0=>Gana Local  ; 1=>GanaVisita ; 2 => empate\"\n            );\n        }\n        for (uint256 p = 0; p < players.length; p++) {\n            if (addressToEleccions[players[p]].eleccionRealizada == true) {\n                for (uint256 j = 0; j < _partidos_ganados_por.length; j++) {\n                    if (addressToEleccions[players[p]].elecciones[j] == _partidos_ganados_por[j]) {\n                        addressToPuntaje[players[p]].puntaje += 3;\n                    }\n                }\n            }\n        }\n        polla_state = POLLA_STATE.CALCULATING_WINNER;\n    }\n\n    uint256 indexOfWinner = 0;\n\n    function endPollaAndCalculateWinner() public onlyOwner {\n        require(\n            polla_state == POLLA_STATE.CALCULATING_WINNER,\n            \"Mundial needs to end and polla calculate points!\"\n        );\n        // Ahora se calcula el winner, pasando por las address que estan jugando y viendo su puntaje gracias al mapping addressToPuntaje\n        uint256 PuntajeMaximo = 0;\n        for (uint256 p = 0; p < players.length; p++) {\n            if (addressToPuntaje[players[p]].puntaje > PuntajeMaximo) {\n                PuntajeMaximo = addressToPuntaje[players[p]].puntaje;\n                indexOfWinner = p;\n            }\n\n            // Falta poner un else por si existe mas de 1 ganador de la polla (ejemplo: dos con el mismo puntaje).\n        }\n        recentWinner = players[indexOfWinner];\n        recentWinner.transfer(address(this).balance); // terminologia sacada de lottery.sol, revisar si esta correcto\n        players = new address payable[](0);\n        polla_state = POLLA_STATE.CLOSED;\n    }\n\n    function getPOLLA_STATE() public view returns (POLLA_STATE) {\n        return polla_state;\n    }\n\n    function getEntranceFee() public view returns (uint256) {\n        return i_entry_fee;\n    }\n\n    function getPlayer(uint256 index) public view returns (address) {\n        return players[index];\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}