{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "name": "Polla_NotAmountToEnter",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8[3]",
          "name": "elections",
          "type": "uint8[3]"
        }
      ],
      "name": "PlayerElections",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "PollaEnter",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[3]",
          "name": "_elecciones",
          "type": "uint8[3]"
        }
      ],
      "name": "EleccionesJugador",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EmpiezaMundial",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[3]",
          "name": "_partidos_ganados_por",
          "type": "uint8[3]"
        }
      ],
      "name": "QuienGanoPartidos",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TerminaMundial",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToPuntaje",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "puntaje",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endPollaAndCalculateWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterPolla",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPOLLA_STATE",
      "outputs": [
        {
          "internalType": "enum Polla.POLLA_STATE",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "polla_state",
      "outputs": [
        {
          "internalType": "enum Polla.POLLA_STATE",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recentWinner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startPolla",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "partido",
          "type": "uint8"
        }
      ],
      "name": "vereleccionpartidox",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "Eleccion",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7c15d0cb805c6a72d94dff29047b139f1d36ac9580a2b18118cc63953bd3377a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1942580",
    "logsBloom": "0x
    "blockHash": "0x273db16dffbe4a3764497bc697742b351da4b0bd903bb40ed6c9958593ca9d75",
    "transactionHash": "0x7c15d0cb805c6a72d94dff29047b139f1d36ac9580a2b18118cc63953bd3377a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x7c15d0cb805c6a72d94dff29047b139f1d36ac9580a2b18118cc63953bd3377a",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x273db16dffbe4a3764497bc697742b351da4b0bd903bb40ed6c9958593ca9d75"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "1942580",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "291bbb54ba9f5e4f64189fd8b0985128",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Polla_NotAmountToEnter\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8[3]\",\"name\":\"elections\",\"type\":\"uint8[3]\"}],\"name\":\"PlayerElections\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"PollaEnter\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"_elecciones\",\"type\":\"uint8[3]\"}],\"name\":\"EleccionesJugador\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EmpiezaMundial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"_partidos_ganados_por\",\"type\":\"uint8[3]\"}],\"name\":\"QuienGanoPartidos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TerminaMundial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToPuntaje\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"puntaje\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPollaAndCalculateWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterPolla\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPOLLA_STATE\",\"outputs\":[{\"internalType\":\"enum Polla.POLLA_STATE\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polla_state\",\"outputs\":[{\"internalType\":\"enum Polla.POLLA_STATE\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recentWinner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPolla\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"partido\",\"type\":\"uint8\"}],\"name\":\"vereleccionpartidox\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"Eleccion\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PollaV2.sol\":\"Polla\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/PollaV2.sol\":{\"content\":\"// segunda version de la polla donde el jugador ingresa toda su apuesta en una funcion.\\n// Esta programado para 3 partidos, pero si se quiere modificar basta con cambiar los uint8[3] => uint8[#]\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror Polla_NotAmountToEnter();\\n\\ncontract Polla is Ownable {\\n    address payable[] private players; //se deben agregar estos para crearlo como que cada adress entra por si solo\\n    mapping(address => uint256) balances; // para mapear que el address puede entrar solo 1 vez\\n    address payable public recentWinner;\\n    // ahora se enumera los estados posibles de la polla\\n    uint256 private immutable i_entry_fee = 10000000000000000;\\n\\n    // aca se determina el estado de la polla, esta empezando, esta cerrada o se esta calculando el ganador\\n    enum POLLA_STATE {\\n        RECEIVING,\\n        NOTRECEIVING,\\n        MUNDIALENDED,\\n        CALCULATING_WINNER,\\n        CLOSED\\n    }\\n    POLLA_STATE public polla_state;\\n\\n    struct Participante {\\n        uint256 puntaje;\\n    }\\n    mapping(address => Participante) public addressToPuntaje; // aca se genera el mapeado para poder encontrar el puntaje actual de algun participante\\n\\n    /* Events*/\\n    event PollaEnter(address indexed player);\\n    event PlayerElections(uint8[3] elections);\\n\\n    function enterPolla() public payable {\\n        // 0.01 ETH entrance\\n        if (msg.value != i_entry_fee) {\\n            revert Polla_NotAmountToEnter();\\n        }\\n        require(balances[msg.sender] == 0, \\\"Player already in Polla!\\\"); // se define si el participante ya particip\\u00f3 anteriormente, esto puede cambiarse si no se quiere esta restricci\\u00f3n\\n        require(polla_state == POLLA_STATE.RECEIVING, \\\"Polla is closed!\\\");\\n        balances[msg.sender] += msg.value;\\n        players.push(payable(msg.sender));\\n        // participantes.push(Participante(msg.sender,0));\\n        addressToPuntaje[msg.sender].puntaje = 0;\\n        emit PollaEnter(msg.sender);\\n    }\\n\\n    function startPolla() public onlyOwner {\\n        require(polla_state == POLLA_STATE.CLOSED, \\\"Can't start a new polla yet!\\\");\\n        polla_state = POLLA_STATE.RECEIVING;\\n    }\\n\\n    struct EleccionesJugadorPartidos {\\n        uint8[3] elecciones;\\n        bool eleccionRealizada;\\n    }\\n\\n    mapping(address => EleccionesJugadorPartidos) addressToEleccions;\\n\\n    function EleccionesJugador(uint8[3] memory _elecciones) public {\\n        require(polla_state == POLLA_STATE.RECEIVING, \\\"Polla is not receiving bets!\\\");\\n        require(balances[msg.sender] > 0, \\\"Player not in Polla!\\\"); // se define si el participante ya particip\\u00f3 anteriormente, esto puede cambiarse si no se quiere esta restricci\\u00f3n\\n        //require(_elecciones.length ==64, \\\"Son 64 elecciones! no mas ni menos\\\") se elimina este require para ahorrar gas fee, por definicion no se deberian poder entregar mas o menos valores que 64\\n        for (uint256 p = 0; p < _elecciones.length; p++) {\\n            require(\\n                _elecciones[p] < 3,\\n                \\\"Admisible values are: 0=>Gana Local  ; 1=>GanaVisita ; 2 => empate\\\"\\n            );\\n        }\\n        addressToEleccions[msg.sender].elecciones = _elecciones;\\n        addressToEleccions[msg.sender].eleccionRealizada = true;\\n        emit PlayerElections(_elecciones);\\n    }\\n\\n    function vereleccionpartidox(address _address, uint8 partido)\\n        public\\n        view\\n        returns (uint8 Eleccion)\\n    {\\n        Eleccion = addressToEleccions[_address].elecciones[partido];\\n        return Eleccion;\\n    }\\n\\n    function EmpiezaMundial() public onlyOwner {\\n        require(polla_state == POLLA_STATE.RECEIVING, \\\"Polla closed or not started!\\\");\\n        polla_state = POLLA_STATE.NOTRECEIVING;\\n    }\\n\\n    function TerminaMundial() public onlyOwner {\\n        require(\\n            polla_state == POLLA_STATE.NOTRECEIVING,\\n            \\\"Polla has to be started and stoped reciving!\\\"\\n        );\\n        polla_state = POLLA_STATE.MUNDIALENDED;\\n    }\\n\\n    function QuienGanoPartidos(uint8[3] memory _partidos_ganados_por) public onlyOwner {\\n        // en esta parte se determina el ganador del partido, la idea es que los resultados vengan de una api y no se tengan que agregar manualmente\\n        require(polla_state == POLLA_STATE.MUNDIALENDED, \\\"Mundial has not ended yet!\\\");\\n        for (uint256 p = 0; p < _partidos_ganados_por.length; p++) {\\n            require(\\n                _partidos_ganados_por[p] < 3,\\n                \\\"Admisible values are: 0=>Gana Local  ; 1=>GanaVisita ; 2 => empate\\\"\\n            );\\n        }\\n        for (uint256 p = 0; p < players.length; p++) {\\n            if (addressToEleccions[players[p]].eleccionRealizada == true) {\\n                for (uint256 j = 0; j < _partidos_ganados_por.length; j++) {\\n                    if (addressToEleccions[players[p]].elecciones[j] == _partidos_ganados_por[j]) {\\n                        addressToPuntaje[players[p]].puntaje += 3;\\n                    }\\n                }\\n            }\\n        }\\n        polla_state = POLLA_STATE.CALCULATING_WINNER;\\n    }\\n\\n    uint256 indexOfWinner = 0;\\n\\n    function endPollaAndCalculateWinner() public onlyOwner {\\n        require(\\n            polla_state == POLLA_STATE.CALCULATING_WINNER,\\n            \\\"Mundial needs to end and polla calculate points!\\\"\\n        );\\n        // Ahora se calcula el winner, pasando por las address que estan jugando y viendo su puntaje gracias al mapping addressToPuntaje\\n        uint256 PuntajeMaximo = 0;\\n        for (uint256 p = 0; p < players.length; p++) {\\n            if (addressToPuntaje[players[p]].puntaje > PuntajeMaximo) {\\n                PuntajeMaximo = addressToPuntaje[players[p]].puntaje;\\n                indexOfWinner = p;\\n            }\\n\\n            // Falta poner un else por si existe mas de 1 ganador de la polla (ejemplo: dos con el mismo puntaje).\\n        }\\n        recentWinner = players[indexOfWinner];\\n        recentWinner.transfer(address(this).balance); // terminologia sacada de lottery.sol, revisar si esta correcto\\n        players = new address payable[](0);\\n        polla_state = POLLA_STATE.CLOSED;\\n    }\\n\\n    function getPOLLA_STATE() public view returns (POLLA_STATE) {\\n        return polla_state;\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entry_fee;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return players[index];\\n    }\\n}\\n\",\"keccak256\":\"0xaa162b87d8fae5afd17ddcbe08820ea2c50771f0abe49e1f26abeb79ef16f4d0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052662386f26fc10000608090815250600060065534801561002357600080fd5b5061004061003561004560201b60201c565b61004d60201b60201c565b610111565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6080516121cc62000134600039600081816104380152610a5f01526121cc6000f3fe6080604052600436106100fe5760003560e01c80636e2b901811610095578063b5ab2c6011610064578063b5ab2c60146102b8578063e55ae4e8146102e3578063e95b096314610320578063ed459c1c14610337578063f2fde38b14610360576100fe565b80636e2b901814610234578063715018a61461025f5780638da5cb5b14610276578063a0b5695f146102a1576100fe565b806338a526c8116100d157806338a526c8146101995780633aa9b99c146101c257806349affb39146101cc5780634f8c70cf14610209576100fe565b806308c47dcb1461010357806309bc33a71461011a5780630d42001d14610145578063248041021461015c575b600080fd5b34801561010f57600080fd5b50610118610389565b005b34801561012657600080fd5b5061012f610434565b60405161013c9190611ba8565b60405180910390f35b34801561015157600080fd5b5061015a61045c565b005b34801561016857600080fd5b50610183600480360381019061017e91906116b5565b61078a565b6040516101909190611bc3565b60405180910390f35b3480156101a557600080fd5b506101c060048036038101906101bb91906116f5565b610801565b005b6101ca610a5d565b005b3480156101d857600080fd5b506101f360048036038101906101ee9190611688565b610cf4565b6040516102009190611ba8565b60405180910390f35b34801561021557600080fd5b5061021e610d12565b60405161022b91906119d7565b60405180910390f35b34801561024057600080fd5b50610249610d38565b6040516102569190611a0d565b60405180910390f35b34801561026b57600080fd5b50610274610d4b565b005b34801561028257600080fd5b5061028b610d5f565b60405161029891906119bc565b60405180910390f35b3480156102ad57600080fd5b506102b6610d88565b005b3480156102c457600080fd5b506102cd610e33565b6040516102da9190611a0d565b60405180910390f35b3480156102ef57600080fd5b5061030a60048036038101906103059190611722565b610e4a565b60405161031791906119bc565b60405180910390f35b34801561032c57600080fd5b50610335610e92565b005b34801561034357600080fd5b5061035e600480360381019061035991906116f5565b610f3c565b005b34801561036c57600080fd5b5061038760048036038101906103829190611688565b6112a8565b005b61039161132c565b600060048111156103a5576103a4611de6565b5b600360149054906101000a900460ff1660048111156103c7576103c6611de6565b5b14610407576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fe90611ac8565b60405180910390fd5b6001600360146101000a81548160ff0219169083600481111561042d5761042c611de6565b5b0217905550565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b61046461132c565b6003600481111561047857610477611de6565b5b600360149054906101000a900460ff16600481111561049a57610499611de6565b5b146104da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d190611a28565b60405180910390fd5b6000805b6001805490508110156106115781600460006001848154811061050457610503611e15565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015411156105fe57600460006001838154811061058b5761058a611e15565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549150806006819055505b808061060990611d6e565b9150506104de565b5060016006548154811061062857610627611e15565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156106fb573d6000803e3d6000fd5b50600067ffffffffffffffff81111561071757610716611e44565b5b6040519080825280602002602001820160405280156107455781602001602082028036833780820191505090505b506001908051906020019061075b929190611476565b506004600360146101000a81548160ff0219169083600481111561078257610781611de6565b5b021790555050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018260ff16600381106107e3576107e2611e15565b5b602091828204019190069054906101000a900460ff16905092915050565b6000600481111561081557610814611de6565b5b600360149054906101000a900460ff16600481111561083757610836611de6565b5b14610877576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086e90611a48565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116108f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f090611b28565b60405180910390fd5b60005b600381101561097557600382826003811061091a57610919611e15565b5b602002015160ff1610610962576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095990611aa8565b60405180910390fd5b808061096d90611d6e565b9150506108fc565b5080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000019060036109c7929190611500565b506001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548160ff0219169083151502179055507fa1f793946bab69e6df30041ddca502c185e80672f7938077757d3a0bb19018c981604051610a5291906119f2565b60405180910390a150565b7f00000000000000000000000000000000000000000000000000000000000000003414610ab6576040517fc3c82e5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610b38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2f90611b08565b60405180910390fd5b60006004811115610b4c57610b4b611de6565b5b600360149054906101000a900460ff166004811115610b6e57610b6d611de6565b5b14610bae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba590611b88565b60405180910390fd5b34600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610bfd9190611c67565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055503373ffffffffffffffffffffffffffffffffffffffff167fab2aea6d36282eaf1b1a1a5566760dbdc7293cec9e70a86abf0f2dfe55f3e95860405160405180910390a2565b60046020528060005260406000206000915090508060000154905081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360149054906101000a900460ff1681565b610d5361132c565b610d5d60006113aa565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610d9061132c565b60016004811115610da457610da3611de6565b5b600360149054906101000a900460ff166004811115610dc657610dc5611de6565b5b14610e06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfd90611b48565b60405180910390fd5b6002600360146101000a81548160ff02191690836004811115610e2c57610e2b611de6565b5b0217905550565b6000600360149054906101000a900460ff16905090565b600060018281548110610e6057610e5f611e15565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610e9a61132c565b600480811115610ead57610eac611de6565b5b600360149054906101000a900460ff166004811115610ecf57610ece611de6565b5b14610f0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0690611a68565b60405180910390fd5b6000600360146101000a81548160ff02191690836004811115610f3557610f34611de6565b5b0217905550565b610f4461132c565b60026004811115610f5857610f57611de6565b5b600360149054906101000a900460ff166004811115610f7a57610f79611de6565b5b14610fba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb190611b68565b60405180910390fd5b60005b6003811015611036576003828260038110610fdb57610fda611e15565b5b602002015160ff1610611023576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101a90611aa8565b60405180910390fd5b808061102e90611d6e565b915050610fbd565b5060005b60018054905081101561127a5760011515600560006001848154811061106357611062611e15565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff16151514156112675760005b600381101561126557828160038110611100576110ff611e15565b5b602002015160ff1660056000600185815481106111205761111f611e15565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001826003811061119a57611199611e15565b5b602091828204019190069054906101000a900460ff1660ff16141561125257600360046000600185815481106111d3576111d2611e15565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825461124a9190611c67565b925050819055505b808061125d90611d6e565b9150506110e4565b505b808061127290611d6e565b91505061103a565b5060038060146101000a81548160ff021916908360048111156112a05761129f611de6565b5b021790555050565b6112b061132c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611320576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131790611a88565b60405180910390fd5b611329816113aa565b50565b61133461146e565b73ffffffffffffffffffffffffffffffffffffffff16611352610d5f565b73ffffffffffffffffffffffffffffffffffffffff16146113a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139f90611ae8565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b8280548282559060005260206000209081019282156114ef579160200282015b828111156114ee5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611496565b5b5090506114fc919061159a565b5090565b826003601f016020900481019282156115895791602002820160005b8382111561155a57835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030261151c565b80156115875782816101000a81549060ff021916905560010160208160000104928301926001030261155a565b505b509050611596919061159a565b5090565b5b808211156115b357600081600090555060010161159b565b5090565b60006115ca6115c584611c03565b611bde565b905080828560208602820111156115e4576115e3611e78565b5b60005b8581101561161457816115fa8882611673565b8452602084019350602083019250506001810190506115e7565b5050509392505050565b60008135905061162d81612151565b92915050565b600082601f83011261164857611647611e73565b5b60036116558482856115b7565b91505092915050565b60008135905061166d81612168565b92915050565b6000813590506116828161217f565b92915050565b60006020828403121561169e5761169d611e7d565b5b60006116ac8482850161161e565b91505092915050565b600080604083850312156116cc576116cb611e7d565b5b60006116da8582860161161e565b92505060206116eb85828601611673565b9150509250929050565b60006060828403121561170b5761170a611e7d565b5b600061171984828501611633565b91505092915050565b60006020828403121561173857611737611e7d565b5b60006117468482850161165e565b91505092915050565b600061175b838361199e565b60208301905092915050565b61177081611ccf565b82525050565b61177f81611cbd565b82525050565b61178e81611c33565b6117988184611c4b565b92506117a382611c29565b8060005b838110156117d45781516117bb878261174f565b96506117c683611c3e565b9250506001810190506117a7565b505050505050565b6117e581611d2b565b82525050565b60006117f8603083611c56565b915061180382611e93565b604082019050919050565b600061181b601c83611c56565b915061182682611ee2565b602082019050919050565b600061183e601c83611c56565b915061184982611f0b565b602082019050919050565b6000611861602683611c56565b915061186c82611f34565b604082019050919050565b6000611884604283611c56565b915061188f82611f83565b606082019050919050565b60006118a7601c83611c56565b91506118b282611ff8565b602082019050919050565b60006118ca602083611c56565b91506118d582612021565b602082019050919050565b60006118ed601883611c56565b91506118f88261204a565b602082019050919050565b6000611910601483611c56565b915061191b82612073565b602082019050919050565b6000611933602c83611c56565b915061193e8261209c565b604082019050919050565b6000611956601a83611c56565b9150611961826120eb565b602082019050919050565b6000611979601083611c56565b915061198482612114565b602082019050919050565b61199881611d14565b82525050565b6119a781611d1e565b82525050565b6119b681611d1e565b82525050565b60006020820190506119d16000830184611776565b92915050565b60006020820190506119ec6000830184611767565b92915050565b6000606082019050611a076000830184611785565b92915050565b6000602082019050611a2260008301846117dc565b92915050565b60006020820190508181036000830152611a41816117eb565b9050919050565b60006020820190508181036000830152611a618161180e565b9050919050565b60006020820190508181036000830152611a8181611831565b9050919050565b60006020820190508181036000830152611aa181611854565b9050919050565b60006020820190508181036000830152611ac181611877565b9050919050565b60006020820190508181036000830152611ae18161189a565b9050919050565b60006020820190508181036000830152611b01816118bd565b9050919050565b60006020820190508181036000830152611b21816118e0565b9050919050565b60006020820190508181036000830152611b4181611903565b9050919050565b60006020820190508181036000830152611b6181611926565b9050919050565b60006020820190508181036000830152611b8181611949565b9050919050565b60006020820190508181036000830152611ba18161196c565b9050919050565b6000602082019050611bbd600083018461198f565b92915050565b6000602082019050611bd860008301846119ad565b92915050565b6000611be8611bf9565b9050611bf48282611d3d565b919050565b6000604051905090565b600067ffffffffffffffff821115611c1e57611c1d611e44565b5b602082029050919050565b6000819050919050565b600060039050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b6000611c7282611d14565b9150611c7d83611d14565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611cb257611cb1611db7565b5b828201905092915050565b6000611cc882611cf4565b9050919050565b6000611cda82611cf4565b9050919050565b6000819050611cef8261213d565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000611d3682611ce1565b9050919050565b611d4682611e82565b810181811067ffffffffffffffff82111715611d6557611d64611e44565b5b80604052505050565b6000611d7982611d14565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611dac57611dab611db7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4d756e6469616c206e6565647320746f20656e6420616e6420706f6c6c61206360008201527f616c63756c61746520706f696e74732100000000000000000000000000000000602082015250565b7f506f6c6c61206973206e6f7420726563656976696e6720626574732100000000600082015250565b7f43616e27742073746172742061206e657720706f6c6c61207965742100000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f41646d697369626c652076616c756573206172653a20303d3e47616e61204c6f60008201527f63616c20203b20313d3e47616e61566973697461203b2032203d3e20656d706160208201527f7465000000000000000000000000000000000000000000000000000000000000604082015250565b7f506f6c6c6120636c6f736564206f72206e6f7420737461727465642100000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f506c6179657220616c726561647920696e20506f6c6c61210000000000000000600082015250565b7f506c61796572206e6f7420696e20506f6c6c6121000000000000000000000000600082015250565b7f506f6c6c612068617320746f206265207374617274656420616e642073746f7060008201527f6564207265636976696e67210000000000000000000000000000000000000000602082015250565b7f4d756e6469616c20686173206e6f7420656e6465642079657421000000000000600082015250565b7f506f6c6c6120697320636c6f7365642100000000000000000000000000000000600082015250565b6005811061214e5761214d611de6565b5b50565b61215a81611cbd565b811461216557600080fd5b50565b61217181611d14565b811461217c57600080fd5b50565b61218881611d1e565b811461219357600080fd5b5056fea26469706673582212202f328a9decbe18eb193fc31c489e855f02a2126ba8fb5010520bf719fe71692c64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100fe5760003560e01c80636e2b901811610095578063b5ab2c6011610064578063b5ab2c60146102b8578063e55ae4e8146102e3578063e95b096314610320578063ed459c1c14610337578063f2fde38b14610360576100fe565b80636e2b901814610234578063715018a61461025f5780638da5cb5b14610276578063a0b5695f146102a1576100fe565b806338a526c8116100d157806338a526c8146101995780633aa9b99c146101c257806349affb39146101cc5780634f8c70cf14610209576100fe565b806308c47dcb1461010357806309bc33a71461011a5780630d42001d14610145578063248041021461015c575b600080fd5b34801561010f57600080fd5b50610118610389565b005b34801561012657600080fd5b5061012f610434565b60405161013c9190611ba8565b60405180910390f35b34801561015157600080fd5b5061015a61045c565b005b34801561016857600080fd5b50610183600480360381019061017e91906116b5565b61078a565b6040516101909190611bc3565b60405180910390f35b3480156101a557600080fd5b506101c060048036038101906101bb91906116f5565b610801565b005b6101ca610a5d565b005b3480156101d857600080fd5b506101f360048036038101906101ee9190611688565b610cf4565b6040516102009190611ba8565b60405180910390f35b34801561021557600080fd5b5061021e610d12565b60405161022b91906119d7565b60405180910390f35b34801561024057600080fd5b50610249610d38565b6040516102569190611a0d565b60405180910390f35b34801561026b57600080fd5b50610274610d4b565b005b34801561028257600080fd5b5061028b610d5f565b60405161029891906119bc565b60405180910390f35b3480156102ad57600080fd5b506102b6610d88565b005b3480156102c457600080fd5b506102cd610e33565b6040516102da9190611a0d565b60405180910390f35b3480156102ef57600080fd5b5061030a60048036038101906103059190611722565b610e4a565b60405161031791906119bc565b60405180910390f35b34801561032c57600080fd5b50610335610e92565b005b34801561034357600080fd5b5061035e600480360381019061035991906116f5565b610f3c565b005b34801561036c57600080fd5b5061038760048036038101906103829190611688565b6112a8565b005b61039161132c565b600060048111156103a5576103a4611de6565b5b600360149054906101000a900460ff1660048111156103c7576103c6611de6565b5b14610407576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fe90611ac8565b60405180910390fd5b6001600360146101000a81548160ff0219169083600481111561042d5761042c611de6565b5b0217905550565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b61046461132c565b6003600481111561047857610477611de6565b5b600360149054906101000a900460ff16600481111561049a57610499611de6565b5b146104da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d190611a28565b60405180910390fd5b6000805b6001805490508110156106115781600460006001848154811061050457610503611e15565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015411156105fe57600460006001838154811061058b5761058a611e15565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549150806006819055505b808061060990611d6e565b9150506104de565b5060016006548154811061062857610627611e15565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156106fb573d6000803e3d6000fd5b50600067ffffffffffffffff81111561071757610716611e44565b5b6040519080825280602002602001820160405280156107455781602001602082028036833780820191505090505b506001908051906020019061075b929190611476565b506004600360146101000a81548160ff0219169083600481111561078257610781611de6565b5b021790555050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018260ff16600381106107e3576107e2611e15565b5b602091828204019190069054906101000a900460ff16905092915050565b6000600481111561081557610814611de6565b5b600360149054906101000a900460ff16600481111561083757610836611de6565b5b14610877576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086e90611a48565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116108f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f090611b28565b60405180910390fd5b60005b600381101561097557600382826003811061091a57610919611e15565b5b602002015160ff1610610962576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095990611aa8565b60405180910390fd5b808061096d90611d6e565b9150506108fc565b5080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000019060036109c7929190611500565b506001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548160ff0219169083151502179055507fa1f793946bab69e6df30041ddca502c185e80672f7938077757d3a0bb19018c981604051610a5291906119f2565b60405180910390a150565b7f00000000000000000000000000000000000000000000000000000000000000003414610ab6576040517fc3c82e5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610b38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2f90611b08565b60405180910390fd5b60006004811115610b4c57610b4b611de6565b5b600360149054906101000a900460ff166004811115610b6e57610b6d611de6565b5b14610bae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba590611b88565b60405180910390fd5b34600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610bfd9190611c67565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055503373ffffffffffffffffffffffffffffffffffffffff167fab2aea6d36282eaf1b1a1a5566760dbdc7293cec9e70a86abf0f2dfe55f3e95860405160405180910390a2565b60046020528060005260406000206000915090508060000154905081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360149054906101000a900460ff1681565b610d5361132c565b610d5d60006113aa565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610d9061132c565b60016004811115610da457610da3611de6565b5b600360149054906101000a900460ff166004811115610dc657610dc5611de6565b5b14610e06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfd90611b48565b60405180910390fd5b6002600360146101000a81548160ff02191690836004811115610e2c57610e2b611de6565b5b0217905550565b6000600360149054906101000a900460ff16905090565b600060018281548110610e6057610e5f611e15565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610e9a61132c565b600480811115610ead57610eac611de6565b5b600360149054906101000a900460ff166004811115610ecf57610ece611de6565b5b14610f0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0690611a68565b60405180910390fd5b6000600360146101000a81548160ff02191690836004811115610f3557610f34611de6565b5b0217905550565b610f4461132c565b60026004811115610f5857610f57611de6565b5b600360149054906101000a900460ff166004811115610f7a57610f79611de6565b5b14610fba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb190611b68565b60405180910390fd5b60005b6003811015611036576003828260038110610fdb57610fda611e15565b5b602002015160ff1610611023576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101a90611aa8565b60405180910390fd5b808061102e90611d6e565b915050610fbd565b5060005b60018054905081101561127a5760011515600560006001848154811061106357611062611e15565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff16151514156112675760005b600381101561126557828160038110611100576110ff611e15565b5b602002015160ff1660056000600185815481106111205761111f611e15565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001826003811061119a57611199611e15565b5b602091828204019190069054906101000a900460ff1660ff16141561125257600360046000600185815481106111d3576111d2611e15565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825461124a9190611c67565b925050819055505b808061125d90611d6e565b9150506110e4565b505b808061127290611d6e565b91505061103a565b5060038060146101000a81548160ff021916908360048111156112a05761129f611de6565b5b021790555050565b6112b061132c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611320576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131790611a88565b60405180910390fd5b611329816113aa565b50565b61133461146e565b73ffffffffffffffffffffffffffffffffffffffff16611352610d5f565b73ffffffffffffffffffffffffffffffffffffffff16146113a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139f90611ae8565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b8280548282559060005260206000209081019282156114ef579160200282015b828111156114ee5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611496565b5b5090506114fc919061159a565b5090565b826003601f016020900481019282156115895791602002820160005b8382111561155a57835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030261151c565b80156115875782816101000a81549060ff021916905560010160208160000104928301926001030261155a565b505b509050611596919061159a565b5090565b5b808211156115b357600081600090555060010161159b565b5090565b60006115ca6115c584611c03565b611bde565b905080828560208602820111156115e4576115e3611e78565b5b60005b8581101561161457816115fa8882611673565b8452602084019350602083019250506001810190506115e7565b5050509392505050565b60008135905061162d81612151565b92915050565b600082601f83011261164857611647611e73565b5b60036116558482856115b7565b91505092915050565b60008135905061166d81612168565b92915050565b6000813590506116828161217f565b92915050565b60006020828403121561169e5761169d611e7d565b5b60006116ac8482850161161e565b91505092915050565b600080604083850312156116cc576116cb611e7d565b5b60006116da8582860161161e565b92505060206116eb85828601611673565b9150509250929050565b60006060828403121561170b5761170a611e7d565b5b600061171984828501611633565b91505092915050565b60006020828403121561173857611737611e7d565b5b60006117468482850161165e565b91505092915050565b600061175b838361199e565b60208301905092915050565b61177081611ccf565b82525050565b61177f81611cbd565b82525050565b61178e81611c33565b6117988184611c4b565b92506117a382611c29565b8060005b838110156117d45781516117bb878261174f565b96506117c683611c3e565b9250506001810190506117a7565b505050505050565b6117e581611d2b565b82525050565b60006117f8603083611c56565b915061180382611e93565b604082019050919050565b600061181b601c83611c56565b915061182682611ee2565b602082019050919050565b600061183e601c83611c56565b915061184982611f0b565b602082019050919050565b6000611861602683611c56565b915061186c82611f34565b604082019050919050565b6000611884604283611c56565b915061188f82611f83565b606082019050919050565b60006118a7601c83611c56565b91506118b282611ff8565b602082019050919050565b60006118ca602083611c56565b91506118d582612021565b602082019050919050565b60006118ed601883611c56565b91506118f88261204a565b602082019050919050565b6000611910601483611c56565b915061191b82612073565b602082019050919050565b6000611933602c83611c56565b915061193e8261209c565b604082019050919050565b6000611956601a83611c56565b9150611961826120eb565b602082019050919050565b6000611979601083611c56565b915061198482612114565b602082019050919050565b61199881611d14565b82525050565b6119a781611d1e565b82525050565b6119b681611d1e565b82525050565b60006020820190506119d16000830184611776565b92915050565b60006020820190506119ec6000830184611767565b92915050565b6000606082019050611a076000830184611785565b92915050565b6000602082019050611a2260008301846117dc565b92915050565b60006020820190508181036000830152611a41816117eb565b9050919050565b60006020820190508181036000830152611a618161180e565b9050919050565b60006020820190508181036000830152611a8181611831565b9050919050565b60006020820190508181036000830152611aa181611854565b9050919050565b60006020820190508181036000830152611ac181611877565b9050919050565b60006020820190508181036000830152611ae18161189a565b9050919050565b60006020820190508181036000830152611b01816118bd565b9050919050565b60006020820190508181036000830152611b21816118e0565b9050919050565b60006020820190508181036000830152611b4181611903565b9050919050565b60006020820190508181036000830152611b6181611926565b9050919050565b60006020820190508181036000830152611b8181611949565b9050919050565b60006020820190508181036000830152611ba18161196c565b9050919050565b6000602082019050611bbd600083018461198f565b92915050565b6000602082019050611bd860008301846119ad565b92915050565b6000611be8611bf9565b9050611bf48282611d3d565b919050565b6000604051905090565b600067ffffffffffffffff821115611c1e57611c1d611e44565b5b602082029050919050565b6000819050919050565b600060039050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b6000611c7282611d14565b9150611c7d83611d14565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611cb257611cb1611db7565b5b828201905092915050565b6000611cc882611cf4565b9050919050565b6000611cda82611cf4565b9050919050565b6000819050611cef8261213d565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000611d3682611ce1565b9050919050565b611d4682611e82565b810181811067ffffffffffffffff82111715611d6557611d64611e44565b5b80604052505050565b6000611d7982611d14565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611dac57611dab611db7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4d756e6469616c206e6565647320746f20656e6420616e6420706f6c6c61206360008201527f616c63756c61746520706f696e74732100000000000000000000000000000000602082015250565b7f506f6c6c61206973206e6f7420726563656976696e6720626574732100000000600082015250565b7f43616e27742073746172742061206e657720706f6c6c61207965742100000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f41646d697369626c652076616c756573206172653a20303d3e47616e61204c6f60008201527f63616c20203b20313d3e47616e61566973697461203b2032203d3e20656d706160208201527f7465000000000000000000000000000000000000000000000000000000000000604082015250565b7f506f6c6c6120636c6f736564206f72206e6f7420737461727465642100000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f506c6179657220616c726561647920696e20506f6c6c61210000000000000000600082015250565b7f506c61796572206e6f7420696e20506f6c6c6121000000000000000000000000600082015250565b7f506f6c6c612068617320746f206265207374617274656420616e642073746f7060008201527f6564207265636976696e67210000000000000000000000000000000000000000602082015250565b7f4d756e6469616c20686173206e6f7420656e6465642079657421000000000000600082015250565b7f506f6c6c6120697320636c6f7365642100000000000000000000000000000000600082015250565b6005811061214e5761214d611de6565b5b50565b61215a81611cbd565b811461216557600080fd5b50565b61217181611d14565b811461217c57600080fd5b50565b61218881611d1e565b811461219357600080fd5b5056fea26469706673582212202f328a9decbe18eb193fc31c489e855f02a2126ba8fb5010520bf719fe71692c64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/PollaV2.sol:Polla",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 144,
        "contract": "contracts/PollaV2.sol:Polla",
        "label": "players",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 148,
        "contract": "contracts/PollaV2.sol:Polla",
        "label": "balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 150,
        "contract": "contracts/PollaV2.sol:Polla",
        "label": "recentWinner",
        "offset": 0,
        "slot": "3",
        "type": "t_address_payable"
      },
      {
        "astId": 162,
        "contract": "contracts/PollaV2.sol:Polla",
        "label": "polla_state",
        "offset": 20,
        "slot": "3",
        "type": "t_enum(POLLA_STATE)159"
      },
      {
        "astId": 170,
        "contract": "contracts/PollaV2.sol:Polla",
        "label": "addressToPuntaje",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Participante)165_storage)"
      },
      {
        "astId": 273,
        "contract": "contracts/PollaV2.sol:Polla",
        "label": "addressToEleccions",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(EleccionesJugadorPartidos)268_storage)"
      },
      {
        "astId": 507,
        "contract": "contracts/PollaV2.sol:Polla",
        "label": "indexOfWinner",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)3_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[3]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(POLLA_STATE)159": {
        "encoding": "inplace",
        "label": "enum Polla.POLLA_STATE",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(EleccionesJugadorPartidos)268_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Polla.EleccionesJugadorPartidos)",
        "numberOfBytes": "32",
        "value": "t_struct(EleccionesJugadorPartidos)268_storage"
      },
      "t_mapping(t_address,t_struct(Participante)165_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Polla.Participante)",
        "numberOfBytes": "32",
        "value": "t_struct(Participante)165_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(EleccionesJugadorPartidos)268_storage": {
        "encoding": "inplace",
        "label": "struct Polla.EleccionesJugadorPartidos",
        "members": [
          {
            "astId": 265,
            "contract": "contracts/PollaV2.sol:Polla",
            "label": "elecciones",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint8)3_storage"
          },
          {
            "astId": 267,
            "contract": "contracts/PollaV2.sol:Polla",
            "label": "eleccionRealizada",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Participante)165_storage": {
        "encoding": "inplace",
        "label": "struct Polla.Participante",
        "members": [
          {
            "astId": 164,
            "contract": "contracts/PollaV2.sol:Polla",
            "label": "puntaje",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}